#!/usr/local/bin/python2.6
import web

render = web.template.render('templates/', globals = {'str': str})#,  base='layout')

#db = web.database(dbn = 'mysql', user = 'root', pw = '', db = 'hackhealth')
db = web.database(dbn = 'mysql', user = 'kurtspco_futurem', pw = 'Ky1ghqT0bS9v4C2yQ', db = 'kurtspco_hackhealth')

#build the statements that each query will use.
statements = ['(diag.icd9code between 410 and 415 or diag.icd9code like "425%" or diag.icd9code between 428 and 430)',
              '(diag.icd9code between 430 and 439 or diag.icd9code between 440 and 449)',
              '(diag.icd9code between 580 and 590)',]
statements.insert(0, 'not ' + ' and not '.join(statements))

diastolic_thresholds = [90, 75, 75, 90]
systolic_thresholds = [140, 125, 125, 140]
bmi_ranges = [0, 14, 18, 24.9, 29.9, 34.9, 1000]
age_range_radius = 10
age_range_center = 20


class chart:
    def POST(self):
        i = web.input()
        age = int(i['age'])
        diastolic = int(i['dia'])
        email = i['email']
        first_name = i['fname']
        gender = i['gender']
        height = int(i['height_ft']) * 12 + int(i['height_in'])
        last_name = i['lname']
        systolic = int(i['sys'])
        weight = int(i['weight'])
        diseases = [(key in i) for key in ['dis1', 'dis2', 'dis3']]

        chart_enable = [not any(diseases)] + diseases
        user_is_healthy = chart_enable[0]

        #indexing is strange but correct.
        target_diastolic = diastolic_thresholds[int(user_is_healthy)]
        target_systolic = systolic_thresholds[int(user_is_healthy)]

        user_in_target = (diastolic < target_diastolic) and (systolic < systolic_thresholds)

        bmi = weight * 703.0 / (height * height)

        bmi_index = 0
        while bmi_index < len(bmi_ranges) - 1:
            if bmi < bmi_ranges[bmi_index + 1]:
                break
            bmi_index += 1
        bmi_min = bmi_ranges[bmi_index]
        bmi_max = bmi_ranges[bmi_index + 1]

        #user_smokes = ('smokes' in i)

        count_under = [0]*4
        count_over = [0]*4

        #This code is here to shortcircuit db calls to test rendering. Should have a better way of doing this.
        #data = {'diastolic', diastolic, 'target_diastolic', target_diastolic,
        #        'systolic', systolic, 'target_systolic', target_systolic,
        #       }
        #percent_under = [0.2,0.2,0.2,0.2]
        #percent_over = [0.4, 0.4, 0.4, 0.4]

        #return render.chart(diastolic, systolic, target_diastolic, target_systolic, percent_under, percent_over)


        for i in range(len(chart_enable)):
            diastolic_threshold = diastolic_thresholds[i]
            systolic_threshold = systolic_thresholds[i]
            statement = statements[i]

            query1 = 'select count(diag.patientguid) as cnt from syncchart ' \
                    'as chart, syncpatient as pat, syncdiagnosis as ' \
                    'diag where chart.patientguid=pat.patientguid and ' \
                    'pat.patientguid=diag.patientguid and pat.yearofbirth ' \
                    'between 2011-($age+$age_range_center+$age_range_radius) ' \
                    'and 2011-($age+$age_range_center-$age_range_radius) and ' \
                    'pat.gender=$gender and chart.bmi between $bmimin and ' \
                    '$bmimax and (chart.diastolicbp >= $dia_thresh or ' \
                    'chart.systolicbp >= $sys_thresh) and ' + statement 
            r = db.query(query1, vars = {'age': age, 'age_range_center': age_range_center,
                                        'age_range_radius': age_range_radius,
                                        'gender': gender, 'bmimin': bmi_min,
                                        'bmimax': bmi_max, 'dia_thresh': diastolic_threshold,
                                        'sys_thresh': systolic_threshold})
            #return ''.join(str(res) for res in r)
            row = r[0]
            count_over[i] = row.cnt
            query2 = "select count(diag.patientguid) as cnt from syncchart as chart, " \
                     "syncpatient as pat, syncdiagnosis as diag where " \
                     "chart.patientguid=pat.patientguid and pat.patientguid" \
                     "=diag.patientguid and pat.yearofbirth between 2011-" \
                     "($age+$age_range_center+$age_range_radius) and 2011-($age+" \
                     "$age_range_center-$age_range_radius) and pat.gender=$gender " \
                     "and chart.bmi between $bmimin and $bmimax and (chart.diastolicbp " \
                     "< $dia_thresh and chart.systolicbp < $sys_thresh) and " + statement
            r = db.query(query2, vars = {'age': age, 'age_range_center': age_range_center,
                                         'age_range_radius': age_range_radius,
                                         'gender': gender, 'bmimin': bmi_min,
                                         'bmimax': bmi_max, 'dia_thresh': diastolic_threshold,
                                         'sys_thresh': systolic_threshold})
            row = r[0]
            count_under[i] = row.cnt
            print 'Under:', count_under[i], 'Over:', count_over[i]
        total_under = sum(count_under)
        total_over = sum(count_over)
        count_total = total_under + total_over

        percent_under = [1.0 * under / total_under for under in count_under]
        percent_over = [1.0 * over / total_over for over in count_over]

        data = {'diastolic', diastolic, 'target_diastolic', target_diastolic,
                'systolic', systolic, 'target_systolic', target_systolic,
               }

        return render.chart(data, percent_under, percent_over)

class index:
    def GET(self):
        return web.seeother('/static/index.html')

